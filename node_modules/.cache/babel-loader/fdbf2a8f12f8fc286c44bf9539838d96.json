{"ast":null,"code":"import React from\"react\";import\"./brainstorm.css\";export default function Brainstorm(_ref){var name=_ref.name,notes=_ref.notes,words=_ref.words,combinations=_ref.combinations;return/*#__PURE__*/React.createElement(\"div\",{className:\"brainstorm uk-flex uk-flex-column\"},/*#__PURE__*/React.createElement(\"div\",{className:\"description\"},/*#__PURE__*/React.createElement(\"h5\",null,name),/*#__PURE__*/React.createElement(\"ul\",null,notes.map(function(note){return/*#__PURE__*/React.createElement(\"li\",{key:note},note);}))),/*#__PURE__*/React.createElement(\"div\",{className:\"uk-flex uk-flex-around uk-flex-wrap uk-width-100\"},words&&words.map(function(item){return/*#__PURE__*/React.createElement(\"div\",{key:item.word,className:\"word uk-text-center\"},/*#__PURE__*/React.createElement(\"h6\",null,item.word),/*#__PURE__*/React.createElement(\"ul\",null,item.graphics.map(function(graphic){return/*#__PURE__*/React.createElement(\"li\",{key:graphic},graphic);})));}),combinations&&/*#__PURE__*/React.createElement(\"div\",{className:\"word possible-combos uk-text-center\"},/*#__PURE__*/React.createElement(\"h6\",null,\"possible combinations\"),/*#__PURE__*/React.createElement(\"ul\",null,combinations.map(function(items){return/*#__PURE__*/React.createElement(\"li\",{key:items.join(\"\")},items.join(\" + \"));})))));}","map":{"version":3,"sources":["/Users/megatron/gt-bootcamp/homework/20 React Portfolio/src/components/Brainstorm/index.js"],"names":["React","Brainstorm","name","notes","words","combinations","map","note","item","word","graphics","graphic","items","join"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAO,kBAAP,CAEA,cAAe,SAASC,CAAAA,UAAT,MAA0D,IAApCC,CAAAA,IAAoC,MAApCA,IAAoC,CAA9BC,KAA8B,MAA9BA,KAA8B,CAAvBC,KAAuB,MAAvBA,KAAuB,CAAhBC,YAAgB,MAAhBA,YAAgB,CACrE,mBACI,2BAAK,SAAS,CAAC,mCAAf,eACI,2BAAK,SAAS,CAAC,aAAf,eACI,8BAAKH,IAAL,CADJ,cAEI,8BAEQC,KAAK,CAACG,GAAN,CAAU,SAAAC,IAAI,qBACV,0BAAI,GAAG,CAAEA,IAAT,EAAgBA,IAAhB,CADU,EAAd,CAFR,CAFJ,CADJ,cAWI,2BAAK,SAAS,CAAC,kDAAf,EAEQH,KAAK,EAAIA,KAAK,CAACE,GAAN,CAAU,SAAAE,IAAI,qBACnB,2BAAK,GAAG,CAAEA,IAAI,CAACC,IAAf,CAAqB,SAAS,CAAC,qBAA/B,eACI,8BAAKD,IAAI,CAACC,IAAV,CADJ,cAEI,8BAEQD,IAAI,CAACE,QAAL,CAAcJ,GAAd,CAAkB,SAAAK,OAAO,qBACrB,0BAAI,GAAG,CAAEA,OAAT,EAAmBA,OAAnB,CADqB,EAAzB,CAFR,CAFJ,CADmB,EAAd,CAFjB,CAgBQN,YAAY,eACR,2BAAK,SAAS,CAAC,qCAAf,eACI,sDADJ,cAEI,8BAEQA,YAAY,CAACC,GAAb,CAAiB,SAAAM,KAAK,qBAClB,0BAAI,GAAG,CAAEA,KAAK,CAACC,IAAN,CAAW,EAAX,CAAT,EAA0BD,KAAK,CAACC,IAAN,CAAW,KAAX,CAA1B,CADkB,EAAtB,CAFR,CAFJ,CAjBZ,CAXJ,CADJ,CA4CH","sourcesContent":["import React from \"react\";\nimport \"./brainstorm.css\";\n\nexport default function Brainstorm({ name, notes, words, combinations }) {\n    return (\n        <div className=\"brainstorm uk-flex uk-flex-column\">\n            <div className=\"description\">\n                <h5>{name}</h5>\n                <ul>\n                    {\n                        notes.map(note => (\n                            <li key={note}>{note}</li>\n                        ))\n                    }\n                </ul>\n            </div>\n            <div className=\"uk-flex uk-flex-around uk-flex-wrap uk-width-100\">\n                {\n                    words && words.map(item => (\n                        <div key={item.word} className=\"word uk-text-center\">\n                            <h6>{item.word}</h6>\n                            <ul>\n                                {\n                                    item.graphics.map(graphic => (\n                                        <li key={graphic}>{graphic}</li>\n                                    ))\n                                }\n                            </ul>\n                        </div>\n                    ))\n                }\n                {\n                    combinations && (\n                        <div className=\"word possible-combos uk-text-center\">\n                            <h6>possible combinations</h6>\n                            <ul>\n                                {\n                                    combinations.map(items => (\n                                        <li key={items.join(\"\")}>{items.join(\" + \")}</li>\n                                    ))\n                                }\n                            </ul>\n                        </div>\n                    )\n                }\n            </div>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}