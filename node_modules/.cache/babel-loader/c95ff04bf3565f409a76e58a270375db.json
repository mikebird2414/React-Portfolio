{"ast":null,"code":"var _jsxFileName = \"/Users/megatron/gt-bootcamp/homework/20 React Portfolio/src/components/TopScrollBar/index.js\";\nimport React, { useState } from 'react';\nimport './topScrollBar.css';\nexport default function TopScrollBar() {\n  // Current position of page from top\n  let currentPosition; // Width of the bar\n\n  const [barWidth, setBarWidth] = useState(0); // Body and HTML elements\n\n  const body = document.body;\n  const html = document.documentElement; // Total height of page minus the height of the window\n\n  const totalHeight = Math.max(body.clientHeight, body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight) - window.innerHeight; // Standard debounce function\n\n  function debounce(func, wait = 20, immediate = false) {\n    let timeout;\n    return function () {\n      let context = this,\n          args = arguments;\n\n      let later = function () {\n        timeout = null;\n        if (!immediate) func.apply(context, args);\n      };\n\n      let callNow = immediate && !timeout;\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n      if (callNow) func.apply(context, args);\n    };\n  }\n\n  ; // Get the width of bar based on the current position and the total height\n\n  function getBarWidth() {\n    currentPosition = html.scrollTop;\n    const tempBarWidth = currentPosition / totalHeight * 100;\n    setBarWidth(tempBarWidth);\n  } // Event listener for scroll\n\n\n  window.addEventListener('scroll', debounce(getBarWidth));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: `${barWidth}%`\n    },\n    className: \"top-scroll-bar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 12\n    }\n  });\n}","map":{"version":3,"sources":["/Users/megatron/gt-bootcamp/homework/20 React Portfolio/src/components/TopScrollBar/index.js"],"names":["React","useState","TopScrollBar","currentPosition","barWidth","setBarWidth","body","document","html","documentElement","totalHeight","Math","max","clientHeight","scrollHeight","offsetHeight","window","innerHeight","debounce","func","wait","immediate","timeout","context","args","arguments","later","apply","callNow","clearTimeout","setTimeout","getBarWidth","scrollTop","tempBarWidth","addEventListener","width"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,oBAAP;AAEA,eAAe,SAASC,YAAT,GAAwB;AAEnC;AACA,MAAIC,eAAJ,CAHmC,CAInC;;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BJ,QAAQ,CAAC,CAAD,CAAxC,CALmC,CAMnC;;AACA,QAAMK,IAAI,GAAGC,QAAQ,CAACD,IAAtB;AACA,QAAME,IAAI,GAAGD,QAAQ,CAACE,eAAtB,CARmC,CASnC;;AACA,QAAMC,WAAW,GAAGC,IAAI,CAACC,GAAL,CAChBN,IAAI,CAACO,YADW,EAEhBP,IAAI,CAACQ,YAFW,EAGhBR,IAAI,CAACS,YAHW,EAIhBP,IAAI,CAACK,YAJW,EAKhBL,IAAI,CAACM,YALW,EAMhBN,IAAI,CAACO,YANW,IAOhBC,MAAM,CAACC,WAPX,CAVmC,CAmBnC;;AACA,WAASC,QAAT,CAAkBC,IAAlB,EAAwBC,IAAI,GAAG,EAA/B,EAAmCC,SAAS,GAAG,KAA/C,EAAsD;AAClD,QAAIC,OAAJ;AACA,WAAO,YAAY;AACf,UAAIC,OAAO,GAAG,IAAd;AAAA,UAAoBC,IAAI,GAAGC,SAA3B;;AACA,UAAIC,KAAK,GAAG,YAAY;AACpBJ,QAAAA,OAAO,GAAG,IAAV;AACA,YAAI,CAACD,SAAL,EAAgBF,IAAI,CAACQ,KAAL,CAAWJ,OAAX,EAAoBC,IAApB;AACnB,OAHD;;AAIA,UAAII,OAAO,GAAGP,SAAS,IAAI,CAACC,OAA5B;AACAO,MAAAA,YAAY,CAACP,OAAD,CAAZ;AACAA,MAAAA,OAAO,GAAGQ,UAAU,CAACJ,KAAD,EAAQN,IAAR,CAApB;AACA,UAAIQ,OAAJ,EAAaT,IAAI,CAACQ,KAAL,CAAWJ,OAAX,EAAoBC,IAApB;AAChB,KAVD;AAWH;;AAAA,GAjCkC,CAmCnC;;AACA,WAASO,WAAT,GAAuB;AACnB5B,IAAAA,eAAe,GAAGK,IAAI,CAACwB,SAAvB;AACA,UAAMC,YAAY,GAAI9B,eAAe,GAAGO,WAAnB,GAAkC,GAAvD;AACAL,IAAAA,WAAW,CAAC4B,YAAD,CAAX;AACH,GAxCkC,CA0CnC;;;AACAjB,EAAAA,MAAM,CAACkB,gBAAP,CAAwB,QAAxB,EAAkChB,QAAQ,CAACa,WAAD,CAA1C;AAEA,sBAAO;AAAK,IAAA,KAAK,EAAE;AAAEI,MAAAA,KAAK,EAAG,GAAE/B,QAAS;AAArB,KAAZ;AAAuC,IAAA,SAAS,EAAC,gBAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACH","sourcesContent":["import React, { useState } from 'react';\nimport './topScrollBar.css';\n\nexport default function TopScrollBar() {\n\n    // Current position of page from top\n    let currentPosition;\n    // Width of the bar\n    const [barWidth, setBarWidth] = useState(0);\n    // Body and HTML elements\n    const body = document.body;\n    const html = document.documentElement;\n    // Total height of page minus the height of the window\n    const totalHeight = Math.max(\n        body.clientHeight,\n        body.scrollHeight,\n        body.offsetHeight,\n        html.clientHeight,\n        html.scrollHeight,\n        html.offsetHeight\n    ) - window.innerHeight;\n\n    // Standard debounce function\n    function debounce(func, wait = 20, immediate = false) {\n        let timeout;\n        return function () {\n            let context = this, args = arguments;\n            let later = function () {\n                timeout = null;\n                if (!immediate) func.apply(context, args);\n            };\n            let callNow = immediate && !timeout;\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n            if (callNow) func.apply(context, args);\n        };\n    };\n\n    // Get the width of bar based on the current position and the total height\n    function getBarWidth() {\n        currentPosition = html.scrollTop;\n        const tempBarWidth = (currentPosition / totalHeight) * 100;\n        setBarWidth(tempBarWidth);\n    }\n\n    // Event listener for scroll\n    window.addEventListener('scroll', debounce(getBarWidth));\n\n    return <div style={{ width: `${barWidth}%` }} className='top-scroll-bar'></div>\n}\n"]},"metadata":{},"sourceType":"module"}