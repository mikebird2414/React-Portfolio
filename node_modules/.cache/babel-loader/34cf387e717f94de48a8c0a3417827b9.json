{"ast":null,"code":"import _slicedToArray from\"/Users/megatron/gt-bootcamp/homework/20 React Portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import'./topScrollBar.css';export default function TopScrollBar(){// Current position of page from top\nvar currentPosition;// Width of the bar\nvar _useState=useState(0),_useState2=_slicedToArray(_useState,2),barWidth=_useState2[0],setBarWidth=_useState2[1];// Body and HTML elements\nvar body=document.body;var html=document.documentElement;// Total height of page minus the height of the window\nvar totalHeight=Math.max(body.clientHeight,body.scrollHeight,body.offsetHeight,html.clientHeight,html.scrollHeight,html.offsetHeight)-window.innerHeight;// Standard debounce function\nfunction debounce(func){var wait=arguments.length>1&&arguments[1]!==undefined?arguments[1]:20;var immediate=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var timeout;return function(){var context=this,args=arguments;var later=function later(){timeout=null;if(!immediate)func.apply(context,args);};var callNow=immediate&&!timeout;clearTimeout(timeout);timeout=setTimeout(later,wait);if(callNow)func.apply(context,args);};};// Get the width of bar based on the current position and the total height\nfunction getBarWidth(){currentPosition=html.scrollTop;var tempBarWidth=currentPosition/totalHeight*100;setBarWidth(tempBarWidth);}// Event listener for scroll\nwindow.addEventListener('scroll',debounce(getBarWidth));return/*#__PURE__*/React.createElement(\"div\",{style:{width:\"\".concat(barWidth,\"%\")},className:\"top-scroll-bar\"});}","map":{"version":3,"sources":["/Users/megatron/gt-bootcamp/homework/20 React Portfolio/src/components/TopScrollBar/index.js"],"names":["React","useState","TopScrollBar","currentPosition","barWidth","setBarWidth","body","document","html","documentElement","totalHeight","Math","max","clientHeight","scrollHeight","offsetHeight","window","innerHeight","debounce","func","wait","immediate","timeout","context","args","arguments","later","apply","callNow","clearTimeout","setTimeout","getBarWidth","scrollTop","tempBarWidth","addEventListener","width"],"mappings":"8KAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,MAAO,oBAAP,CAEA,cAAe,SAASC,CAAAA,YAAT,EAAwB,CAEnC;AACA,GAAIC,CAAAA,eAAJ,CACA;AAJmC,cAKHF,QAAQ,CAAC,CAAD,CALL,wCAK5BG,QAL4B,eAKlBC,WALkB,eAMnC;AACA,GAAMC,CAAAA,IAAI,CAAGC,QAAQ,CAACD,IAAtB,CACA,GAAME,CAAAA,IAAI,CAAGD,QAAQ,CAACE,eAAtB,CACA;AACA,GAAMC,CAAAA,WAAW,CAAGC,IAAI,CAACC,GAAL,CAChBN,IAAI,CAACO,YADW,CAEhBP,IAAI,CAACQ,YAFW,CAGhBR,IAAI,CAACS,YAHW,CAIhBP,IAAI,CAACK,YAJW,CAKhBL,IAAI,CAACM,YALW,CAMhBN,IAAI,CAACO,YANW,EAOhBC,MAAM,CAACC,WAPX,CASA;AACA,QAASC,CAAAA,QAAT,CAAkBC,IAAlB,CAAsD,IAA9BC,CAAAA,IAA8B,2DAAvB,EAAuB,IAAnBC,CAAAA,SAAmB,2DAAP,KAAO,CAClD,GAAIC,CAAAA,OAAJ,CACA,MAAO,WAAY,CACf,GAAIC,CAAAA,OAAO,CAAG,IAAd,CAAoBC,IAAI,CAAGC,SAA3B,CACA,GAAIC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,EAAY,CACpBJ,OAAO,CAAG,IAAV,CACA,GAAI,CAACD,SAAL,CAAgBF,IAAI,CAACQ,KAAL,CAAWJ,OAAX,CAAoBC,IAApB,EACnB,CAHD,CAIA,GAAII,CAAAA,OAAO,CAAGP,SAAS,EAAI,CAACC,OAA5B,CACAO,YAAY,CAACP,OAAD,CAAZ,CACAA,OAAO,CAAGQ,UAAU,CAACJ,KAAD,CAAQN,IAAR,CAApB,CACA,GAAIQ,OAAJ,CAAaT,IAAI,CAACQ,KAAL,CAAWJ,OAAX,CAAoBC,IAApB,EAChB,CAVD,CAWH,EAED;AACA,QAASO,CAAAA,WAAT,EAAuB,CACnB5B,eAAe,CAAGK,IAAI,CAACwB,SAAvB,CACA,GAAMC,CAAAA,YAAY,CAAI9B,eAAe,CAAGO,WAAnB,CAAkC,GAAvD,CACAL,WAAW,CAAC4B,YAAD,CAAX,CACH,CAED;AACAjB,MAAM,CAACkB,gBAAP,CAAwB,QAAxB,CAAkChB,QAAQ,CAACa,WAAD,CAA1C,EAEA,mBAAO,2BAAK,KAAK,CAAE,CAAEI,KAAK,WAAK/B,QAAL,KAAP,CAAZ,CAAuC,SAAS,CAAC,gBAAjD,EAAP,CACH","sourcesContent":["import React, { useState } from 'react';\nimport './topScrollBar.css';\n\nexport default function TopScrollBar() {\n\n    // Current position of page from top\n    let currentPosition;\n    // Width of the bar\n    const [barWidth, setBarWidth] = useState(0);\n    // Body and HTML elements\n    const body = document.body;\n    const html = document.documentElement;\n    // Total height of page minus the height of the window\n    const totalHeight = Math.max(\n        body.clientHeight,\n        body.scrollHeight,\n        body.offsetHeight,\n        html.clientHeight,\n        html.scrollHeight,\n        html.offsetHeight\n    ) - window.innerHeight;\n\n    // Standard debounce function\n    function debounce(func, wait = 20, immediate = false) {\n        let timeout;\n        return function () {\n            let context = this, args = arguments;\n            let later = function () {\n                timeout = null;\n                if (!immediate) func.apply(context, args);\n            };\n            let callNow = immediate && !timeout;\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n            if (callNow) func.apply(context, args);\n        };\n    };\n\n    // Get the width of bar based on the current position and the total height\n    function getBarWidth() {\n        currentPosition = html.scrollTop;\n        const tempBarWidth = (currentPosition / totalHeight) * 100;\n        setBarWidth(tempBarWidth);\n    }\n\n    // Event listener for scroll\n    window.addEventListener('scroll', debounce(getBarWidth));\n\n    return <div style={{ width: `${barWidth}%` }} className='top-scroll-bar'></div>\n}\n"]},"metadata":{},"sourceType":"module"}